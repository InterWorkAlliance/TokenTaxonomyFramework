syntax = "proto3";

package iwa.ttf.token.sustainbility;

import "tokens.proto";
import "sustainability/common.proto";
import "google/protobuf/timestamp.proto";
option csharp_namespace = "IWA.TTF.Token.Sustainability";
option java_package = "org.iwa.ttf.token.sustainability";
option java_multiple_files = true;

//Processed Claim token schema - not a part of certification
message ProcessedClaim
{
    string id = 1;
    string verification_contract_id = 2; //Id for the verification contract
    string ecological_claim_id = 3; //the ID for the Ecological Claim being processed.
    string credit_id = 4; //when a credit is issued, the processed claim will be retired and the credit id issued will be recorded.
    bytes quantity = 5; //the estimated cumulative benefits summing the Environmental Factor (EF) before and after difference for the entire claim. I.e. 5 for a carbon claim would be 5 tCO2e.
    repeated common.CoBenefit co_benefits = 6;
    repeated CheckpointResult checkpoint_results = 7; //summary and verified links for the the claim's checkpoint verification results.
}

//basically the same data structure as the checkpoint with different field names, so can reuse the Ecological Checkpoint property set.
message CheckpointResult{
    string processed_id = 1;
    verifiedlink.VerifiedLink link_to_verification_data = 2; //Processed data findings
    daterange.DateRange date_range = 3; //Date range for the checkpoint
    string ef_before = 4; //environmental factor before project activities
    string ef_after = 5; //environmental factor after project activities
}

//must check issuer role membership for invoker
message MintRequest {
    ProcessedClaim processed_claim = 1;
}

message MintResponse{
    tokens.TransactionConfirmation transaction_confirmation = 1;
}


message GetProcessedClaimRequest{}
message GetProcessedClaimResponse{
    ProcessedClaim claim = 1;
}

//date range
message GetDateRangeRequest {}

message GetDateRangeResponse {
    common.DateRange date_range = 1;
}

message SetDateRangeRequest {
    common.DateRange date_range = 1;
}

message SetDateRangeResponse {
    tokens.TransactionConfirmation transaction_confirmation = 1;
}

//Co-benefits

message GetCoBenefitsRequest{}

message GetCoBenefitsResponse {
    repeated common.CoBenefit co_benefits = 1;
}

//if used as a repeated property set
message AddCoBenefitRequest {
    common.CoBenefit co_benefit = 1;
}

//if used as a repeated property set
message AddCoBenefitResponse {
    tokens.TransactionConfirmation transaction_confirmation = 1;
}

//if used as a repeated property set
message RemoveCoBenefitRequest {
    common.CoBenefit co_benefit = 1;
}

//if used as a repeated property set
message RemoveCoBenefitResponse {
    tokens.TransactionConfirmation transaction_confirmation = 1;
}

//Process Data

message GetProcessDataRequest{}

message GetResultResponse{
    repeated common.VerifiedLink process_data = 1;
}

message AddProcessDataRequest{
    common.VerifiedLink process_data = 1;
}

//Credible
//sent by the Registry after an Ecological Benefit Token, carbon credit, is created based on this processed claim. After the benefit token is minted, the process token is credited/retired suppling the credit token Id to link the tokens together and so the processed claim can not be credited more than once.
message CreditedRequest{
    string credit_id = 1; //link to the Ecological Benefit token issued by the Registry based of this processed claim.
}

message CreditedResponse{
    tokens.TransactionConfirmation transaction_confirmation = 1;
}

service ProcesssedClaims {
    //mintable: Creating an RPC interface that accepts the request and returns, the mint requests should do a role check to ensure that the invoker is a member of the issuers group/role.
    rpc Mint (MintRequest) returns (MintResponse) {} //requires a role check to ensure that the invoker is a member of the issuers group/role.
    //roles: manage issuer that is initially set at mint
    rpc GetProcessedClaim (GetProcessedClaimRequest) returns (GetProcessedClaimResponse) {}
    rpc AddProcessingData (AddProcessDataRequest) returns (tokens.TransactionConfirmation) {}
    rpc SetToCredited (CreditedRequest) returns (CreditedResponse) {}
}