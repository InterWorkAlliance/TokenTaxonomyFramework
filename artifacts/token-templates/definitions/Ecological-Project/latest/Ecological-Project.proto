syntax = "proto3";

package iwa.ttf.token.sustainbility;

import "tokens.proto";
import "sustainability/common.proto";
import "Ecological-Claim.proto";
import "google/protobuf/timestamp.proto";
option csharp_namespace = "IWA.TTF.Token.Sustainability";
option java_package = "org.iwa.ttf.token.sustainability";
option java_multiple_files = true;

message EcologicalProject{
    string id = 1;
    string name = 2;
    string description = 3;
    repeated common.Address addresses = 4;
    repeated string owners = 5;
    EcologicalProjectInfo project_information = 6;
    ModularBenefitProjects modular_benefit_projects = 7;
}

message EcologicalProjectInfo{
    string project_id = 1;
    string country = 2;//Alpha 3 ISO 3166 international standard country code https://www.iban.com/country-codes
    common.ProjectScale project_scale = 3; //side of the project
    common.Region region = 4;
    string first_year_issuance = 5;
    common.VerifiedLink information_link = 6;
    repeated verifiedlink.VerifiedLink media_links = 7; //Links to media
    string registry_id = 8; //OPTIONAL Registry ID if different
}

message GetEPRequest {
    string id = 1;
}

message GetEPResponse {
    EcologicalProject ecological_project_or_program = 1;
}

message UpdateEP{
    EcologicalProject ep = 1;
}


message SetEcologicalProjectInfoRequest {
    EcologicalProjectInfo ecological_project_info = 1;
}

message SetEcologicalProjectInfoResponse {
    tokens.TransactionConfirmation transaction_confirmation = 1;
}

message ModularBenefitProject {
    string id = 1;
    string project_id = 2;
    string name = 3; //descriptive name for the project
    common.ClassificationCategory classification_category = 4;
    common.ClassificationMethod classification_method = 5;
    common.EcologicalBenefitType ecological_benefit_type = 6;
    common.EcologicalBenefitScope ecological_benefit_scope = 7;
    string arb_id = 8; //California Air Resources Board
    geolocation.GeographicLocation geographic_location = 8;
    repeated string developers = 9;
    repeated string sponsors = 10;
    ecologicalclaim.EcologicalClaims ecological_claims  = 11;
}

message ModularBenefitProjects {
    repeated ModularBenefitProject modular_benefit_project = 1;
}

message GetModularBenefitProjectsRequest {}

message GetModularBenefitProjectsResponse {
    ModularBenefitProjects modular_benefit_projects = 1;
}

//if Delegable present
message AddModularBenefitProjectRequest {
    ModularBenefitProject modular_benefit_project = 1; 
}

//if Delegable present and no child claims
message AddModularBenefitProjectResponse {
    tokens.TransactionConfirmation transaction_confirmation = 1;
}

message UpdateModularBenefitProjectRequest{
    ModularBenefitProject mbp = 1;
}

message RemoveModularBenefitProjectRequest{
    ModularBenefitProject modular_benefit_project = 1;
}

message RemoveModularBenefitProjectResponse{
    ModularBenefitProject modular_benefit_project = 1; 
}


service EcologicalProjects {
    rpc GetEcologicalProject (GetEPRequest) returns (GetEPResponse) {}
    rpc SetEPInfo (SetEcologicalProjectInfoRequest) returns (SetEcologicalProjectInfoResponse) {}
    rpc AddModularBenefitProject (AddModularBenefitProjectResponse) returns (AddModularBenefitProjectResponse) {}
    rpc UpdateModularBenefitProject (UpdateModularBenefitProjectRequest) returns (tokens.TransactionConfirmation) {}
    rpc RemoveModularBenefitProject (RemoveModularBenefitProjectRequest) returns (RemoveModularBenefitProjectResponse) {}
}